<!DOCTYPE html>
<html lang="en">
<link rel="stylesheet" type="text/css" href="../static/recovery.css">
    <body onload="createBridge()">
        <h1>Recovery</h1>

        <div class="regForm">
            <div class="tab"  id="username_select_zone">
                <h2>Step 1</h2>
                <select id="username_input" onchange="disable()">
                    {% for username in usernames %} <!--Automatically select username for which recovery was asked-->
                        {% if username == selected_username %}
                            <option value="{{username[0]}}" selected>{{username[0]}}</option>
                        {% else %}
                            <option value="{{username[0]}}">{{username[0]}}</option>
                        {% endif %}
                    {% endfor %}
                </select>
                <br>
                <button class="backtologin" id="backLogin" onclick="backLogin()">
                    Back to login
                </button>
            </div>

            <div class="tab" id="response_zone" >
                <h2>Step 2</h2>
                <b>Question:<label for="answer_input" id="question"></label></b>
                <br>
                <br>
                <input type="text"  id="answer_input" placeholder="Answer">

            </div>

            <div class="tab" id="new_informations_zone">
                <label for="new_password_input">
                    New Password
                </label>
                <input type="password" id="new_password_input">
                <br> <br>

                <label for="new_question_input">
                    New Question
                </label>
                <input type="text" id="new_question_input">
                <br> <br>

                <label for="new_answer_input">
                    New Answer
                </label>
                <input type="text" id="new_answer_input">
                <br> <br>

                <br><br>
            </div>

            <div >
              <div style="float:right;">
                <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
              </div>
            </div>

            <div class="dots" style="text-align:center;margin-top:40px;">
              <span class="step"></span>
              <span class="step"></span>
              <span class="step"></span>
            </div>
        </div>
    </body>
</html>

<script src="qrc:///qtwebchannel/qwebchannel.js"></script>
<script>
    // TODO: Submit Answer in controller + comments on this page in order to understand how it works


    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
      // This function will display the specified tab of the form ...
      var x = document.getElementsByClassName("tab");
      x[n].style.display = "block";
      // ... and fix the Previous/Next buttons:
      if (n === 0) {
        document.getElementById("prevBtn").style.display = "none";
      } else {
        document.getElementById("prevBtn").style.display = "inline";
      }
      if (n === (x.length - 1)) {
        document.getElementById("nextBtn").innerHTML = "Submit new informations";
      } else if(n === 0){
        document.getElementById("nextBtn").innerHTML = "Start";
      }else{
          document.getElementById("nextBtn").innerHTML = "Next";
      }
      // ... and run a function that displays the correct step indicator:
      fixStepIndicator(n)
    }

    function nextPrev(n) {
      // This function will figure out which tab to display
      var x = document.getElementsByClassName("tab");
      // Exit the function if any field in the current tab is invalid:
      if (n === 1 && !validateForm()) return false;
      if(currentTab === 0){
          enableResponseZone();
      }
      if(currentTab === 1){
          submitAnswer();
      }
      // Hide the current tab:
      x[currentTab].style.display = "none";
      // Increase or decrease the current tab by 1:
      currentTab = currentTab + n;
      // if you have reached the end of the form... :
      if (currentTab >= x.length) {
        //...the form gets submitted:
        submitNewInformations();
        return false;
      }
      // Otherwise, display the correct tab:
      showTab(currentTab);
    }

    function validateForm() {
      // This function deals with validation of the form fields
      var x, y, i, valid = true;
      x = document.getElementsByClassName("tab");
      y = x[currentTab].getElementsByTagName("input");
      // A loop that checks every input field in the current tab:
      for (i = 0; i < y.length; i++) {
        // If a field is empty...
        if (y[i].value === "") {
          // add an "invalid" class to the field:
          y[i].className += " invalid";
          // and set the current valid status to false:
          valid = false;
        }
      }
      // If the valid status is true, mark the step as finished and valid:
      if (valid) {
        document.getElementsByClassName("step")[currentTab].className += " finish";
      }
      return valid; // return the valid status
    }

    function fixStepIndicator(n) {
      // This function removes the "active" class of all steps...
      var i, x = document.getElementsByClassName("step");
      for (i = 0; i < x.length; i++) {
        x[i].className = x[i].className.replace(" active", "");
      }
      //... and adds the "active" class to the current step:
      x[n].className += " active";
    }



    // Create the QWebChannel object and connect to the bridge
    async function createBridge() {
        await new QWebChannel(qt.webChannelTransport, function (channel) {
        window.bridge = channel.objects.bridge;

        printPY = bridge.printJS;
    });
    }

    function backLogin() {
        bridge.cancelRecovery();
    }

    async function enableResponseZone() {
        const username = document.getElementById("username_input").value;

        document.getElementById("question").innerHTML = await bridge.getQuestion(username);

        document.getElementById("username_select_zone").hidden = true;
        document.getElementById("response_zone").hidden = false;
        document.getElementById("new_informations_zone").hidden = true;

    }

    function backToRecover() {
        document.getElementById("username_select_zone").hidden = false;
        document.getElementById("response_zone").hidden = true;
        document.getElementById("new_informations_zone").hidden = true;
    }

    async function submitNewInformations() {
        const new_password = document.getElementById("new_password_input").value;
        const new_question = document.getElementById("new_question_input").value;
        const new_answer = document.getElementById("new_answer_input").value;
        const old_answer = document.getElementById("answer_input").value;

        if (await bridge.submitNewInformations(new_password, new_question, new_answer, old_answer) === true) {
            bridge.successfulRecovery();
        } else {
            alert("Recovery failed, please retry or contact support.");
        }
    }


    function showNewInformations() {

        document.getElementById("response_zone").hidden = true;
        document.getElementById("new_informations_zone").hidden = false;
    }

    async function submitAnswer() {
        const answer = document.getElementById("answer_input").value;

        if (await bridge.submitAnswer(answer) ===true) {
            showNewInformations()
        } else {
            alert("Wrong answer");
        }
    }


</script>