<!DOCTYPE html>
<html lang="en">
<link rel="stylesheet" type="text/css" href="../static/startup.css">

<body onload="createBridge()">

    <h1>Startup page</h1>

    <div class="regForm">
        <div class="tab">
            <h2>Create Identifier</h2>
            <label for="password_input">
                <b>Username</b>
            </label>
            <p><input type="text" placeholder="Username..." id="username_input" oninput="this.className = ''"></p>
            <label for="password_input">
                <b>Password</b>
            </label>
            <p><input type="password" placeholder="Password..." id="password_input" oninput="this.className = ''"></p>
        </div>

        <div class="tab">
            <h2>Step 2</h2>
            <label for="question_input">
                <b>Question</b>
            </label>
           <p><input type="text" id="question_input" placeholder="Question..." oninput="this.className = ''"></p>
        </div>

        <div class="tab">
            <h2>Step 3</h2>
            <label for="answer_input">
                <b>Answer</b>
            </label>
            <p><input type="text" id="answer_input" placeholder="Username..." oninput="this.className = ''"></p>
        </div>

        <div >
          <div style="float:right;">
            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
          </div>
        </div>

        <div class="dots" style="text-align:center;margin-top:40px;">
          <span class="step"></span>
          <span class="step"></span>
          <span class="step"></span>
        </div>
        {% if nbr_user > 0 %}
            <button onclick="bridge.callLogin()">
                Login Instead
            </button>
        {% endif %}
    </div>
</body>
</html>

<script src="qrc:///qtwebchannel/qwebchannel.js"></script>
<script>

    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
      // This function will display the specified tab of the form ...
      var x = document.getElementsByClassName("tab");
      x[n].style.display = "block";
      // ... and fix the Previous/Next buttons:
      if (n === 0) {
        document.getElementById("prevBtn").style.display = "none";
      } else {
        document.getElementById("prevBtn").style.display = "inline";
      }
      if (n === (x.length - 1)) {
        document.getElementById("nextBtn").innerHTML = "Create MDPSaver Account";
      } else {
        document.getElementById("nextBtn").innerHTML = "Next";
      }
      // ... and run a function that displays the correct step indicator:
      fixStepIndicator(n)
    }

    function nextPrev(n) {
      // This function will figure out which tab to display
      var x = document.getElementsByClassName("tab");
      // Exit the function if any field in the current tab is invalid:
      if (n === 1 && !validateForm()) return false;
      // Hide the current tab:
      x[currentTab].style.display = "none";
      // Increase or decrease the current tab by 1:
      currentTab = currentTab + n;
      // if you have reached the end of the form... :
      if (currentTab >= x.length) {
        //...the form gets submitted:
        submit();
        return false;
      }
      // Otherwise, display the correct tab:
      showTab(currentTab);
    }

    function validateForm() {
      // This function deals with validation of the form fields
      var x, y, i, valid = true;
      x = document.getElementsByClassName("tab");
      y = x[currentTab].getElementsByTagName("input");
      // A loop that checks every input field in the current tab:
      for (i = 0; i < y.length; i++) {
        // If a field is empty...
        if (y[i].value === "") {
          // add an "invalid" class to the field:
          y[i].className += " invalid";
          // and set the current valid status to false:
          valid = false;
        }
      }
      // If the valid status is true, mark the step as finished and valid:
      if (valid) {
        document.getElementsByClassName("step")[currentTab].className += " finish";
      }
      return valid; // return the valid status
    }

    function fixStepIndicator(n) {
      // This function removes the "active" class of all steps...
      var i, x = document.getElementsByClassName("step");
      for (i = 0; i < x.length; i++) {
        x[i].className = x[i].className.replace(" active", "");
      }
      //... and adds the "active" class to the current step:
      x[n].className += " active";
    }


    // Create the QWebChannel object and connect to the bridge
    async function createBridge() {
        await new QWebChannel(qt.webChannelTransport, function (channel) {
        window.bridge = channel.objects.bridge;

        print = bridge.printJS;
    });
    }

    function submit() {
        // TODO: Add validation
        const username = document.getElementById("username_input").value;
        const password = document.getElementById("password_input").value;
        const question = document.getElementById("question_input").value;
        const answer = document.getElementById("answer_input").value;

        bridge.submitAccount(username, password, question, answer)

    }

</script>